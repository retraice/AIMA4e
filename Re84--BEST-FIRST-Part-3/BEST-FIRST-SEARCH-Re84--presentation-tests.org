<2022-12-16 Fri 15:32>



#+begin_src python :results output
  class Node:
      def __init__(self, state, parent=None, action=None, path_cost=0):                        
          self.__dict__.update(state=state, parent=parent, action=action, path_cost=path_cost) 
      def __repr__(self): return '<{}>'.format(self.state)                                     
      def __len__(self): return 0 if self.parent is None else (1 + len(self.parent))           
      def __lt__(self, other): return self.path_cost < other.path_cost                         

  n1 = Node("s1", "Mom", "uum", 1)

  print(dir(n1))

#+end_src

#+RESULTS:
: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__len__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'action', 'parent', 'path_cost', 'state']






n1 =   Node("s1", "Mom", # "uuum", "half a mil").  # We're going to have to # store and fetch these # four attributes.
update the __dict__

Calling an object, # e.g. "n1", returns # e.g. "<s1>"

parent is itself a node, # so len           is recursive.

less-than method:
